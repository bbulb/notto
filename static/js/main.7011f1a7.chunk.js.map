{"version":3,"sources":["pages/Home.tsx","pages/Result.tsx","pages/Scan.tsx","components/Header.tsx","components/Router.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","history","useHistory","useState","url","setUrl","Container","className","Card","CardHeader","icon","faGlobe","CardBody","InputGroup","Input","value","onChange","e","target","placeholder","InputGroupAddon","addonType","Button","onClick","v","URL","searchParams","getAll","length","push","color","CardFooter","faCamera","getShuffledArray","input","array","Object","assign","i","j","Math","floor","random","temp","Ticket","numbers","Table","striped","bordered","map","line","index","String","fromCharCode","number","jndex","Result","ticket","splited","split","round","shift","undefined","slice","parseTicket","useParams","generated","setGenerated","onMouseDown","fullNumbers","rejected","forEach","num","filtered","filter","includes","result","shuffled","faDice","navigator","clipboard","writeText","window","location","href","faLink","faLaughBeam","Scan","facing","setFacing","faQrcode","delay","onScan","data","get","onError","err","console","log","facingMode","faSync","Header","Navbar","expand","NavbarBrand","faPray","Router","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7011f1a7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Container,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCamera, faGlobe } from '@fortawesome/free-solid-svg-icons'\n\nexport const Home: React.FC = () => {\n  const history = useHistory()\n  const [url, setUrl] = useState('')\n  const onGo = () => {\n    const params = new URL(url).searchParams\n    const v = params.getAll('v')\n    if (v.length > 0) {\n      history.push(`/result/${v}`)\n    }\n  }\n  return (\n    <Container className='p-3'>\n      <Card className='text-center'>\n        <CardHeader>\n          {' '}\n          <FontAwesomeIcon icon={faGlobe} className='text-3xl mr-2' />\n          URL\n        </CardHeader>\n        <CardBody>\n          <InputGroup>\n            <Input\n              value={url}\n              onChange={(e) => {\n                setUrl(e.target.value)\n              }}\n              placeholder='Enter a dhlottery url'\n            />\n            <InputGroupAddon addonType='append'>\n              <Button onClick={onGo} color='primary'>\n                Go!\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </CardBody>\n        <CardFooter>\n          <Button\n            color='primary'\n            onClick={() => {\n              history.push('/scan')\n            }}\n          >\n            <FontAwesomeIcon icon={faCamera} className='text-3xl mr-2' />\n            or Scan QR Code\n          </Button>\n        </CardFooter>\n      </Card>\n    </Container>\n  )\n}\n","import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDice, faLaughBeam, faLink } from '@fortawesome/free-solid-svg-icons'\nimport { useParams } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Container,\n  Table,\n} from 'reactstrap'\n\nconst parseTicket = (value: string) => {\n  const splited = value.split(/[a-z]/)\n  const round = splited.shift()\n  const numbers = splited.map((line) => {\n    return [\n      +line.slice(0, 2),\n      +line.slice(2, 4),\n      +line.slice(4, 6),\n      +line.slice(6, 8),\n      +line.slice(8, 10),\n      +line.slice(10, 12),\n    ]\n  })\n  return {\n    round: round === undefined ? 0 : +round,\n    numbers,\n  }\n}\n\nconst getShuffledArray = (input: number[]) => {\n  const array = Object.assign([], input)\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    const temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n  return array\n}\n\ninterface ITicketProps {\n  numbers: Array<Array<number>>\n}\n\nconst Ticket: React.FC<ITicketProps> = ({ numbers }) => {\n  return (\n    <Table striped bordered>\n      <tbody>\n        {numbers.map((line, index) => {\n          return (\n            <tr key={index}>\n              <th>{String.fromCharCode(index + 65)}</th>\n              {line.map((number, jndex) => {\n                return <td key={jndex}>{number}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </Table>\n  )\n}\n\ninterface IResultParams {\n  v: string\n}\n\nexport const Result: React.FC = () => {\n  const { v } = useParams<IResultParams>()\n  const ticket = parseTicket(v)\n  const [generated, setGenerated] = useState<Array<Array<number>>>([])\n\n  const generateNumbers = () => {\n    const fullNumbers = []\n    for (let i = 1; i < 46; i++) {\n      fullNumbers.push(i)\n    }\n\n    const rejected: number[] = []\n    ticket.numbers.forEach((line) => {\n      line.forEach((num) => {\n        rejected.push(num)\n      })\n    })\n\n    const filtered = fullNumbers.filter((num) => {\n      return !rejected.includes(num)\n    })\n\n    const result: number[][] = []\n\n    for (let i = 0; i < 5; i++) {\n      const shuffled = getShuffledArray(filtered)\n      result.push([\n        shuffled[0],\n        shuffled[1],\n        shuffled[2],\n        shuffled[3],\n        shuffled[4],\n        shuffled[5],\n      ])\n    }\n\n    setGenerated(result)\n  }\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(window.location.href)\n  }\n\n  return (\n    <Container className='p-2'>\n      <Card className='text-center'>\n        <CardHeader className='font-weight-bold'>\n          ì œ{ticket?.round}íšŒ\n        </CardHeader>\n        <CardBody>\n          <Ticket numbers={ticket?.numbers} />\n        </CardBody>\n        <CardFooter>\n          <Button color='primary' onMouseDown={generateNumbers}>\n            <FontAwesomeIcon icon={faDice} className='text mr-1' />\n            notto!\n          </Button>\n          <Button\n            className='ml-2'\n            color='primary'\n            onMouseDown={copyToClipboard}\n          >\n            <FontAwesomeIcon icon={faLink} className='text-3xl mr-2' />\n            Copy Link\n          </Button>\n        </CardFooter>\n      </Card>\n      <Card className='text-center mt-2'>\n        <CardHeader>\n          <FontAwesomeIcon icon={faLaughBeam} className='text-3xl mr-2' />\n          Numbers of week\n        </CardHeader>\n        <CardBody>\n          {generated.length > 0 ? (\n            <Ticket numbers={generated} />\n          ) : (\n            <span>\n              Press <i>notto!</i> button.\n            </span>\n          )}\n        </CardBody>\n      </Card>\n    </Container>\n  )\n}\n","import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faQrcode, faSync } from '@fortawesome/free-solid-svg-icons'\nimport QrReader from 'react-qr-reader'\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Container,\n} from 'reactstrap'\n\nexport const Scan: React.FC = () => {\n  const history = useHistory()\n  const [facing, setFacing] = useState<'environment' | 'user' | undefined>(\n    'environment'\n  )\n  const handleScan = (data: string | null) => {\n    if (data) {\n      const url = new URL(data)\n      const v = url.searchParams.get('v')\n      if (v) {\n        history.push(`/result/${v}`)\n      }\n    }\n  }\n  const handleError = (err: unknown) => {\n    console.log(err)\n  }\n  const changeCamera = () => {\n    if (facing === 'environment') {\n      setFacing('user')\n    } else {\n      setFacing('environment')\n    }\n  }\n  return (\n    <Container className='p-3'>\n      <Card className='text-center'>\n        <CardHeader>\n          {' '}\n          <FontAwesomeIcon icon={faQrcode} className='text-3xl mr-2' />\n          QR Code\n        </CardHeader>\n        <CardBody>\n          <QrReader\n            delay={300}\n            onScan={handleScan}\n            onError={handleError}\n            facingMode={facing}\n          />\n        </CardBody>\n        <CardFooter>\n          <Button color='primary' onClick={changeCamera}>\n            <FontAwesomeIcon icon={faSync} className='text-3xl mr-2' />\n            Change Camera\n          </Button>\n        </CardFooter>\n      </Card>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { faPray } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Navbar, NavbarBrand } from 'reactstrap'\n\nexport const Header: React.FC = () => {\n  return (\n    <Navbar color='primary' expand='lg'>\n      <NavbarBrand className='text-light' href='#'>\n        <FontAwesomeIcon icon={faPray} className='text-3xl mr-2' />\n        notto\n      </NavbarBrand>\n    </Navbar>\n  )\n}\n","import { HashRouter, Route } from 'react-router-dom'\nimport { Home } from '../pages/Home'\nimport { Result } from '../pages/Result'\nimport { Scan } from '../pages/Scan'\nimport { Header } from './Header'\n\nexport const Router: React.FC = () => {\n  return (\n    <HashRouter>\n      <Header />\n      <Route exact path='/'>\n        <Home />\n      </Route>\n      <Route exact path='/scan'>\n        <Scan />\n      </Route>\n      <Route path='/result/:v'>\n        <Result />\n      </Route>\n    </HashRouter>\n  )\n}\n","import { Router } from './Router'\n\nexport const App: React.FC = () => {\n  return <Router />\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { App } from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}