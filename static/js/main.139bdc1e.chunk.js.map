{"version":3,"sources":["pages/Home.tsx","pages/Result.tsx","components/Header.tsx","components/Router.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","useState","facing","setFacing","history","useHistory","Container","className","Card","Header","Body","delay","onScan","data","v","URL","searchParams","get","push","onError","err","console","log","facingMode","Footer","Button","variant","onClick","getShuffledArray","input","array","Object","assign","i","length","j","Math","floor","random","temp","Ticket","numbers","Table","striped","bordered","map","line","index","String","fromCharCode","number","jndex","Result","ticket","value","splited","split","round","shift","undefined","slice","parseTicket","useParams","generated","setGenerated","Title","fullNumbers","rejected","forEach","num","filtered","filter","includes","result","shuffled","navigator","clipboard","writeText","window","location","href","Navbar","bg","expand","Brand","Router","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.139bdc1e.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Button, Card, Container } from 'react-bootstrap'\nimport QrReader from 'react-qr-reader'\n\nexport const Home: React.FC = () => {\n  const [facing, setFacing] = useState<'environment' | 'user' | undefined>(\n    'environment'\n  )\n  const history = useHistory()\n  const handleScan = (data: string | null) => {\n    if (data) {\n      const url = new URL(data)\n      const v = url.searchParams.get('v')\n      if (v) {\n        history.push(`/result/${v}`)\n      }\n    }\n  }\n  const handleError = (err: unknown) => {\n    console.log(err)\n  }\n  const changeCamera = () => {\n    if (facing === 'environment') {\n      setFacing('user')\n    } else {\n      setFacing('environment')\n    }\n  }\n  return (\n    <Container className='p-3'>\n      <Card className='text-center'>\n        <Card.Header>QR Code</Card.Header>\n        <Card.Body>\n          <QrReader\n            delay={500}\n            onScan={handleScan}\n            onError={handleError}\n            facingMode={facing}\n          />\n        </Card.Body>\n        <Card.Footer>\n          <Button variant='primary' onClick={changeCamera}>\n            Change Camera\n          </Button>\n        </Card.Footer>\n      </Card>\n    </Container>\n  )\n}\n","import { useState } from 'react'\nimport { Button, Card, Container, Table } from 'react-bootstrap'\nimport { useParams } from 'react-router-dom'\n\nconst parseTicket = (value: string) => {\n  const splited = value.split('q')\n  const round = splited.shift()\n  const numbers = splited.map((line) => {\n    return [\n      +line.slice(0, 2),\n      +line.slice(2, 4),\n      +line.slice(4, 6),\n      +line.slice(6, 8),\n      +line.slice(8, 10),\n    ]\n  })\n  return {\n    round: round === undefined ? 0 : +round,\n    numbers,\n  }\n}\n\nconst getShuffledArray = (input: number[]) => {\n  const array = Object.assign([], input)\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    const temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n  return array\n}\n\ninterface ITicketProps {\n  numbers: Array<Array<number>>\n}\n\nconst Ticket: React.FC<ITicketProps> = ({ numbers }) => {\n  return (\n    <Table striped bordered>\n      <tbody>\n        {numbers.map((line, index) => {\n          return (\n            <tr key={index}>\n              <th>{String.fromCharCode(index + 65)}</th>\n              {line.map((number, jndex) => {\n                return <td key={jndex}>{number}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </Table>\n  )\n}\n\ninterface IResultParams {\n  v: string\n}\n\nexport const Result: React.FC = () => {\n  const { v } = useParams<IResultParams>()\n  const ticket = parseTicket(v)\n  const [generated, setGenerated] = useState<Array<Array<number>>>([])\n\n  const generateNumbers = () => {\n    const fullNumbers = []\n    for (let i = 1; i < 46; i++) {\n      fullNumbers.push(i)\n    }\n\n    const rejected: number[] = []\n    ticket.numbers.forEach((line) => {\n      line.forEach((num) => {\n        rejected.push(num)\n      })\n    })\n\n    const filtered = fullNumbers.filter((num) => {\n      return !rejected.includes(num)\n    })\n\n    const result: number[][] = []\n\n    for (let i = 0; i < 5; i++) {\n      const shuffled = getShuffledArray(filtered)\n      result.push([\n        shuffled[0],\n        shuffled[1],\n        shuffled[2],\n        shuffled[3],\n        shuffled[4],\n        shuffled[5],\n      ])\n    }\n\n    setGenerated(result)\n  }\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(window.location.href)\n  }\n\n  return (\n    <Container className='p-2'>\n      <Card className='text-center m-1'>\n        <Card.Title className='mt-3'>제{ticket?.round}회</Card.Title>\n        <Card.Body>\n          <Ticket numbers={ticket?.numbers} />\n        </Card.Body>\n        <Card.Footer>\n          <Button variant='primary' onClick={generateNumbers}>\n            No!tto\n          </Button>\n          <Button className='ml-1' variant='primary' onClick={copyToClipboard}>\n            Copy to clipboard\n          </Button>\n        </Card.Footer>\n      </Card>\n      <Card className='text-center m-1'>\n        <Card.Header>Numbers of week</Card.Header>\n        <Card.Body>\n          <Ticket numbers={generated} />\n        </Card.Body>\n      </Card>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nexport const Header: React.FC = () => {\n  return (\n    <Navbar bg='primary' expand='lg'>\n      <Navbar.Brand className='text-light' href='/'>\n        notto\n      </Navbar.Brand>\n    </Navbar>\n  )\n}\n","import { HashRouter, Route } from 'react-router-dom'\nimport { Home } from '../pages/Home'\nimport { Result } from '../pages/Result'\nimport { Header } from './Header'\n\nexport const Router: React.FC = () => {\n  return (\n    <HashRouter>\n      <Header />\n      <Route exact path='/'>\n        <Home />\n      </Route>\n      <Route path='/result/:v'>\n        <Result />\n      </Route>\n    </HashRouter>\n  )\n}\n","import { Router } from './Router'\n\nexport const App: React.FC = () => {\n  return <Router />\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { App } from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}